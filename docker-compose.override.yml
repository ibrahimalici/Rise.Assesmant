version: '3.4'

services:
  postgresql_db:
    container_name: postgresql_db
    restart: always
    environment:
     POSTGRES_USER: postgres
     POSTGRES_PASSWORD: azx@1234
     POSTGRES_DB: postgres
    volumes:
     - postgres-volume:/var/lib/postgresql/data
    ports:
     - "5432:5432"

  mongo-reports:
    container_name: mongo-reports
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: azx1234
    volumes:
     - mongo-reports-volume:/data/db
     - mongo-reports-volume:/data/config/db
    ports:
     - "27017:27017"

  rabbitMQ:
    container_name: rabbitMQ
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq/

  apigateway:
    container_name: tesodev_gateway
    image: ${DOCKER_REGISTRY-}apigateway
    restart: unless-stopped
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    environment:
      - "ASPNETCORE_ENVIRONMENT=Development"
      - "Scheme=http"
      - "ServiceHost=apigateway"
      - "ServicePort=80"
    depends_on:
      - database_service_orders
    ports:
    - "8000:80"

  contactsapi:
    build:
      context: .
      dockerfile: Services/Contacts/ContactsAPI/Dockerfile
    ports:
      - "8080:80"
      - "56849:443"

  reportsapi:
    build:
      context: .
      dockerfile: Services/Reports/ReportsAPI/Dockerfile
    ports:
      - "8081:80"
      - "56850:443"

